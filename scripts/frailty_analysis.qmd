---
title: "Ischaemia outcomes based on age and frailty"
jupyter: python3
bibliography: ../risk_management_file/ref.bib
---

Elderly patients with ACS may not receive guideline-recommended therapy [@kotanidis2024invasive]. This report contains Cox proportional hazards models for elderly patients (> 70 years old) MI/cardiac death, depending on the type of ACS managemenent:

* *Invasive* meaning PCI/CABG, or
* *Conservative*, meaning only DAPT (no PCI/CABG)

```{python}
#| echo: false

from sksurv.nonparametric import kaplan_meier_estimator
import yaml
from pyhbr import common
import matplotlib.pyplot as plt

# Read the configuration file
with open("icb_hic.yaml") as stream:
    try:
        config = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print(f"Failed to load config file: {exc}")
        exit(1)
```

```{python}
#| echo: false

# This is used to load a file, and is also used
# as the prefix for all saved data files.
analysis_name = config["analysis_name"]
save_dir = config["save_dir"]

print(f"Analysis name: {analysis_name}")

# Load the data from file
data, data_path = common.load_item(f"{analysis_name}_data", save_dir=save_dir)

# Load the raw data file
raw_file = data["raw_file"]
raw_data = common.load_exact_item(raw_file, save_dir=save_dir)
```

```{python}
# Get counts
num_index = len(data["features_index"])
index_start = raw_data["index_start"].strftime("%Y-%m-%d")
index_end = raw_data["index_end"].strftime("%Y-%m-%d")

mask = features_index["age"] >= 70
ischaemia_survival = data["ischaemia_survival"][mask]
```

The total number of index ACS events is `{python} num_index` between the dates `{python} index_start` and `{python} index_end`. Of these, 

```{python}




# Calculate survival curves for bleeding
survival = data["ischaemia_survival"]
status = ~survival["right_censor"]
survival_in_days = survival["time_to_event"].dt.days
time, survival_prob, conf_int = kaplan_meier_estimator(
    status, survival_in_days, conf_type="log-log"
)

# Get the input features
features_index = data["features_index"]

# Set the aspect ratio for the figures to roughly 2:1,
# because each plot is two graphs side-by-side
figsize = (11, 5)

# Plot the ROC curves for the models
fig, ax = plt.subplots()

ax.step(time, survival_prob, where="post")
ax.fill_between(time, conf_int[0], conf_int[1], alpha=0.25, step="post")
ax.set_ylim(0.85, 1.00)
ax.set_ylabel(r"Est. probability of no adverse event")
ax.set_xlabel("Time (days)")
ax.set_title("Ischaemia Kaplan-Meier Curve for MACE")

plt.show()
```

