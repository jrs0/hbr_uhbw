---
title: "Ischaemia outcomes based on age and frailty"
jupyter: python3
bibliography: ../risk_management_file/ref.bib
format:
  html:
    css: styles.css
    html-math-method: katex
  pdf:
    documentclass: article
    #margin-left: 20mm
    #margin-right: 20mm
  docx: {}
---

Elderly patients with ACS may not receive guideline-recommended therapy [@kotanidis2024invasive]. This report contains survival models for elderly patients (> 70 years old) MI/cardiac death, depending on the type of ACS managemenent:

* Invasive, meaning PCI/CABG, or
* Conservative, meaning only DAPT (no PCI/CABG)

```{python}
#| echo: false
#| output: false

from sksurv.nonparametric import kaplan_meier_estimator
from sksurv.linear_model import CoxPHSurvivalAnalysis
import yaml
from pyhbr import common
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
```

```{python}
#| echo: false
#| output: false

# Path to the directory containing raw data
save_dir = "../report/save_data"

# Load the data from file
data, data_path = common.load_item(f"icb_hic_data", save_dir=save_dir)

# Load the raw data file
raw_file = data["raw_file"]
raw_data = common.load_exact_item(raw_file, save_dir=save_dir)
```

```{python}
# | echo: false
# | output: false

# To simplify the analysis, only use index events marked as
# ACS index (i.e. there were ACS codes in the first episode).
df = data["features_index"]
features_index = df[df["acs_index"]]

# Fetch the other datasets and filter by ACS index (i.e. which
# spell IDs are in features_index
survival = features_index[[]].merge(
    data["ischaemia_survival"], on="spell_id", how="left"
)
management = features_index[[]].merge(
    data["info_management"], on="spell_id", how="left"
)
groups = features_index[[]].merge(data["features_codes"], on="spell_id", how="left")
attributes = features_index[[]].merge(
    data["features_attributes"], on="spell_id", how="left"
)
scores = features_index[[]].merge(data["info_index_scores"], on="spell_id", how="left")


def map_presentation(x):
    """Store the type of ACS presentation"""
    if x["stemi_index"]:
        return "STEMI"
    elif x["nstemi_index"]:
        return "NSTEMI"
    else:
        return "Unstable Angina"


# Make a dataframe of features
df = pd.DataFrame(index=features_index.index)

# Add the management type
df["Management"] = management["management"].cat.reorder_categories(
    ["No Angio", "Medical", "PCI/CABG"]
)
df["Cambridge Score"] = scores["cambridge_score"]

df["Age"] = features_index["age"]
df["Elderly"] = np.where(df["Age"] >= 75, ">=75", "<75")
df["Gender"] = features_index["gender"].str.title()
df["Presentation"] = pd.Categorical(
    features_index.apply(map_presentation, axis=1),
    ["STEMI", "NSTEMI", "Unstable Angina"],
)

# Add some risk factors for ischaemia outcomes. These
# come from ICD-10 code groups from HES data (the groups dataframe)
df["Diabetes"] = groups["diabetes_before"] != 0

# Risk factors from primary care attributes
df["Smoking"] = attributes["smoking"].str.title()
df["BMI"] = attributes["bmi"]


# Get date range
index_start = raw_data["index_start"].strftime("%Y-%m-%d")
index_end = raw_data["index_end"].strftime("%Y-%m-%d")

num_index = len(df)

```

Index events are identified by looking at the first episode of the hospital admission. If the primary diagnosis (ICD-10 code) of the episode is an ACS code, then the spell is an index event. The total number of index ACS events is `{python} num_index` between the dates `{python} index_start` and `{python} index_end`.

The type of management is identified by looking at whether any PCI or CABG procedures were performed in the 7 days following the start of the index admission. If no PCI or CABG is present, the 7 day window is checked for whether an angiogram is performed, and if it is, the patient is recorded as medically managed. Otherwise, the patient is recorded as having no angiogram.

The type of management given to the patients in the index spells broken down by age and presentation is shown below.

```{python}
pd.crosstab(df["Management"], [df["Presentation"], df["Elderly"]], margins=True)
```

The plots below show the breakdown of age and frailty in the different management groups The distribution of age and cambridge score by management type is shown first. (Electronic frailty index has not been used because there was approximately 70% missingness in the data. Instead, Cambridge multimorbidity score is used as a surrogate for frailty.)

```{python}
#df[["Management", "Age", "Cambridge Score"]].groupby("Management").describe(include="all").transpose()


fig, ax = plt.subplots(1,2)
sns.kdeplot(df, x="Age", hue="Management", ax=ax[0])
sns.kdeplot(df, x="Cambridge Score", hue="Management", ax=ax[1])

plt.tight_layout()
```

The figure below shows each patient as a point with their age and comorbidity score at index on the x and x axes. Groups of points are coloured according to what management is performed.

The utility of a plot like this would relate to the lower right corner (elderly but not "frail", at least according to the multimorbidity score). Any surrugate for frailty could be used on the y axis instead of Cambridge score. Presumably, patients in this corner should receive PCI/CABG instead of no angiogram.

```{python}
#df[["Management", "Age", "Cambridge Score"]].groupby("Management").describe(include="all").transpose()

sns.scatterplot(df, x="Age", y="Cambridge Score", hue="Management", marker=".")

plt.tight_layout()
```

The plot below shows the survival curve for the over-75 group (ignoring management type).

```{python}
# | echo: false
# | warning: false

# Plot the ROC curves for the models
fig, ax = plt.subplots()
elderly = df["Elderly"].eq(">=75")

def masked_survival(survival, mask):
    masked_survival = survival[mask]
    status = ~masked_survival["right_censor"]
    survival_in_days = masked_survival["time_to_event"].dt.days
    return kaplan_meier_estimator(status, survival_in_days, conf_type="log-log")


# Non-fatal MACE outcomes (remove fatal outcomes)
remove = survival["fatal"] & ~survival["right_censor"]
time, survival_prob, conf_int = masked_survival(survival, ~remove & elderly)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="MACE (non-fatal)"
)

# Cardiac death (remove non-fatal outcomes)
remove = ~survival["fatal"] & ~survival["right_censor"]
time, survival_prob, conf_int = masked_survival(survival, ~remove & elderly)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="CV death"
)

ax.set_ylim(0.80, 1.00)
ax.set_ylabel(r"Est. probability of no adverse event")
ax.set_xlabel("Time (days)")
ax.set_title("Ischaemia Kaplan-Meier Curve for MACE")
plt.legend()
plt.show()
```

The plot below shows the difference in survival curves between the invasive and conservative management groups (still for age over 75), for non-fatal MACE outcomes:

```{python}
#| echo: false
#| warning: false

# Plot the ROC curves for the models
fig, ax = plt.subplots()

# Fatal outcomes (to remove)
fatal = survival["fatal"] & ~survival["right_censor"]

# Restrict to PCI/CABG
mask = info_management["management"] == "PCI/CABG"
time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & mask & elderly
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="PCI/CABG"
)

# Restrict to medically managed
mask = info_management["management"] == "Medical"
time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & mask & elderly
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="Medically managed (angio but no intervention)"
)

# Restrict to no angiogram
mask = info_management["management"] == "No Angio"
time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & mask & elderly
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="No angiogram"
)

ax.set_ylim(0.70, 1.00)
ax.set_ylabel(r"Est. probability of no adverse event")
ax.set_xlabel("Time (days)")
ax.set_title("Non-fatal MACE outcome probability by management")
plt.legend()
plt.show()
```

The graph below shows the same plot (by management type) for fatal outcomes:

```{python}
#| echo: false
#| warning: false

# Plot the ROC curves for the models
fig, ax = plt.subplots()

# Non-fatal outcomes (to remove)
non_fatal = ~survival["fatal"] & ~survival["right_censor"]

# Restrict to PCI/CABG
mask = info_management["management"] == "PCI/CABG"
time, survival_prob, conf_int = masked_survival(
    survival,
    ~non_fatal & mask & elderly
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="PCI/CABG"
)

# Restrict to medically managed
mask = info_management["management"] == "Medical"
time, survival_prob, conf_int = masked_survival(
    survival,
    ~non_fatal & mask & elderly
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="Medically managed"
)

# Restrict to no angiogram
mask = info_management["management"] == "No Angio"
time, survival_prob, conf_int = masked_survival(
    survival,
    ~non_fatal & mask & elderly
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="No angiogram"
)

ax.set_ylim(0.70, 1.00)
ax.set_ylabel(r"Est. probability of no adverse event")
ax.set_xlabel("Time (days)")
ax.set_title("CV mortality outcome probability by management")
plt.legend()
plt.show()
```


```{python}
#| echo: false
#| output: false

# Cox proportional hazards model for outcomes in 
# elderly group based on features
#X = features_index[["age", "gender"]].merge(info_management, left_index=True, right_index=True, how="left").rename(columns={"age": "Age", "gender": "Gender", "group": "Management"})
#X["Management"] = X["Management"].map({"PCI": "Invasive", "CABG": "Invasive", "Conservative": "Conservative"})

# # Non-fatal MACE outcomes (remove fatal outcomes)
# remove = survival["fatal"] & ~survival["right_censor"]
# masked_survival = survival[~remove]
# status = ~masked_survival["right_censor"]
# survival_in_days = masked_survival["time_to_event"].dt.days
# y = pd.concat([status, survival_in_days], axis=1).to_records(index=False)

# # Make features
# X = pd.DataFrame()
# X["Invasive"] = info_management[~remove]["group"] != "Conservative"

# estimator = CoxPHSurvivalAnalysis()
# estimator.fit(X, y)

# pd.Series(np.exp(estimator.coef_), index=X.columns)
```

The graphs below show survival curves in each group (PCI/CABG, medically managed, and no angiogram), broken down into less than 75 and over 75.

```{python}
#| echo: false
#| warning: false

# Plot the ROC curves for the models
fig, ax = plt.subplots()

# Fatal outcomes (to remove)
fatal = survival["fatal"] & ~survival["right_censor"]

# Restrict to PCI/CABG
mask = info_management["management"] == "PCI/CABG"

time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & elderly & mask
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label=">=75"
)

time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & ~elderly & mask
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="<75"
)

ax.set_ylim(0.70, 1.00)
ax.set_ylabel(r"Est. probability of no adverse event")
ax.set_xlabel("Time (days)")
ax.set_title("Non-fatal MACE outcomes, PCI/CABG")
plt.legend()
plt.show()
```

```{python}
#| echo: false
#| warning: false

# Plot the ROC curves for the models
fig, ax = plt.subplots()

# Fatal outcomes (to remove)
fatal = survival["fatal"] & ~survival["right_censor"]

# Restrict to PCI/CABG
mask = info_management["management"] == "Medical"

time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & elderly & mask
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label=">=75"
)

time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & ~elderly & mask
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="<75"
)

ax.set_ylim(0.70, 1.00)
ax.set_ylabel(r"Est. probability of no adverse event")
ax.set_xlabel("Time (days)")
ax.set_title("Non-fatal MACE outcomes, medically managed")
plt.legend()
plt.show()
```

```{python}
#| echo: false
#| warning: false

# Plot the ROC curves for the models
fig, ax = plt.subplots()

# Fatal outcomes (to remove)
fatal = survival["fatal"] & ~survival["right_censor"]

# Restrict to PCI/CABG
mask = info_management["management"] == "No Angio"

time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & elderly & mask
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label=">=75"
)

time, survival_prob, conf_int = masked_survival(
    survival,
    ~fatal & ~elderly & mask
)

ax.step(time, survival_prob, where="post")
ax.fill_between(
    time, conf_int[0], conf_int[1], alpha=0.25, step="post", label="<75"
)

ax.set_ylim(0.70, 1.00)
ax.set_ylabel(r"Est. probability of no adverse event")
ax.set_xlabel("Time (days)")
ax.set_title("Non-fatal MACE outcomes, no angiogram")
plt.legend()
plt.show()
```